Index: Client/Core/CClient.cpp
===================================================================
--- Client/Core/CClient.cpp	(revision 466)
+++ Client/Core/CClient.cpp	(working copy)
@@ -77,6 +77,8 @@
 	m_strPassword = CVAR_GET_STRING("pass");
 	m_bWindowedMode = CVAR_GET_BOOL("windowed");
 	m_bFPSToggle = CVAR_GET_BOOL("fps");
+	m_strConnectHost = CVAR_GET_STRING("currentconnect_server");
+	m_usConnectPort = CVAR_GET_INTEGER("currentconnect_port");
 
 	// IE9 fix - disabled if disableie9fix is set or shift is pressed
 	if(!CVAR_GET_BOOL("disableie9fix") || GetAsyncKeyState(VK_SHIFT) > 0)
@@ -355,6 +357,16 @@
 			{
 				String strPostPath("/getlatestversion.php");
 				m_pHttpClient->Get(strPostPath);
+
+				if(strcmp(m_strConnectHost,"0.0.0.0"))
+				{
+					// Send connect event
+					m_pMainMenu->OnDirectConnect(m_strConnectHost,m_usConnectPort);
+
+					// Remove current connect entries from xml file
+					CVAR_SET_STRING("currentconnect_server","0.0.0.0");
+					CVAR_SET_INTEGER("currentconnect_port",9999);
+				}
 			}
 		}
 	}
@@ -428,7 +440,6 @@
 	{
 		if(m_pHttpClient->IsBusy())
 			m_pHttpClient->Process();
-
 		if(m_pHttpClient->GotData())
 		{
 			// Get the data
Index: Client/Core/CClient.h
===================================================================
--- Client/Core/CClient.h	(revision 466)
+++ Client/Core/CClient.h	(working copy)
@@ -91,6 +91,10 @@
 	bool                   m_bFPSToggle;
 	unsigned short         m_usPort;
 	String                 m_strHost;
+
+	String				   m_strConnectHost;
+	unsigned short		   m_usConnectPort;
+
 	String                 m_strNick;
 	String                 m_strPassword;
 	bool		           m_bNetworkStatsDisplayed;
@@ -159,6 +163,8 @@
 	String                 GetNick() { return m_strNick; }
 	void                   SetPassword(String strPassword) { m_strPassword = strPassword; }
 	String                 GetPassword() { return m_strPassword; }
+	String				   GetDirectHost() { return m_strConnectHost; }
+	unsigned short		   GetDirectPort() { return m_usConnectPort; }
 
 	bool                   OnLoad();
 	void                   OnUnload();
Index: Client/Core/CMainMenu.cpp
===================================================================
--- Client/Core/CMainMenu.cpp	(revision 466)
+++ Client/Core/CMainMenu.cpp	(working copy)
@@ -622,4 +622,18 @@
 {
 	g_pClient->GetCredits()->Start();
 	return true;
-}
\ No newline at end of file
+}
+
+void CMainMenu::OnDirectConnectMessageBoxResponse(eGUIMessageBoxResponse type)
+{
+	if(type == GUI_MESSAGEBOX_YES)
+	{
+		CMainMenu::GetSingleton()->OnConnect(g_pClient->GetDirectHost(), g_pClient->GetDirectPort(), String(""), true);
+	}
+}
+
+void CMainMenu::OnDirectConnect(String strHost, unsigned short usPort)
+{
+	CMainMenu::GetSingleton()->OnConnect(g_pClient->GetDirectHost(), g_pClient->GetDirectPort(), String(""), true);
+	//g_pClient->GetGUI()->ShowMessageBox(String("Are you sure you want to connect to the server %s:%d ?",strHost.Get(),usPort).Get(), "DirectConnect", GUI_MESSAGEBOXTYPE_YESNO, OnDirectConnectMessageBoxResponse);
+}
Index: Client/Core/CMainMenu.h
===================================================================
--- Client/Core/CMainMenu.h	(revision 466)
+++ Client/Core/CMainMenu.h	(working copy)
@@ -90,6 +90,9 @@
 	void             SetDisconnectButtonVisible(bool bDisconnectButtonVisible);
 	void			 SetNetworkStats(String strHost, int players, int maxplayers, String strName);
 	void			 ResetNetworkStats();
+	static void	     OnDirectConnectMessageBoxResponse(eGUIMessageBoxResponse type);
+	void			 OnDirectConnect(String strHost, unsigned short usPort);
+
 	// ShowMessageBox?
 	void			 ShowMessageBox(const char * szMessage, const char * szHeader, bool bGameMenu, bool bResetGame, bool bAllowReconnect);
 	CSettingsMenu *	GetSettingsMenu() { return m_pSettingsMenu; }
Index: Client/Launcher/Client.Launcher.vcxproj
===================================================================
--- Client/Launcher/Client.Launcher.vcxproj	(revision 466)
+++ Client/Launcher/Client.Launcher.vcxproj	(working copy)
@@ -25,7 +25,7 @@
     <UseOfMfc>false</UseOfMfc>
     <CharacterSet>NotSet</CharacterSet>
     <WholeProgramOptimization>true</WholeProgramOptimization>
     <PlatformToolset>v100</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
@@ -107,12 +107,12 @@
     <ClCompile>
       <Optimization>MaxSpeed</Optimization>
       <IntrinsicFunctions>true</IntrinsicFunctions>
-      <AdditionalIncludeDirectories>.;../../Shared;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <AdditionalIncludeDirectories>.;../../Vendor;../../Shared;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
       <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;_CRT_SECURE_NO_WARNINGS;_CRT_SECURE_NO_DEPRECATE;WIN32_LEAN_AND_MEAN;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <MinimalRebuild>false</MinimalRebuild>
       <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
       <FunctionLevelLinking>true</FunctionLevelLinking>
-      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeader>NotUsing</PrecompiledHeader>
       <PrecompiledHeaderFile>StdInc.h</PrecompiledHeaderFile>
       <WarningLevel>Level3</WarningLevel>
       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
@@ -140,6 +140,16 @@
     </Link>
   </ItemDefinitionGroup>
   <ItemGroup>
+    <ClCompile Include="..\..\Shared\CLogFile.cpp" />
+    <ClCompile Include="..\..\Shared\CSettings.cpp" />
+    <ClCompile Include="..\..\Shared\CXML.cpp" />
+    <ClCompile Include="..\..\Shared\Threading\CMutex.cpp" />
+    <ClCompile Include="..\..\Shared\Threading\CThread.cpp" />
+    <ClCompile Include="..\..\Vendor\tinyxml\ticpp.cpp" />
+    <ClCompile Include="..\..\Vendor\tinyxml\tinystr.cpp" />
+    <ClCompile Include="..\..\Vendor\tinyxml\tinyxml.cpp" />
+    <ClCompile Include="..\..\Vendor\tinyxml\tinyxmlerror.cpp" />
+    <ClCompile Include="..\..\Vendor\tinyxml\tinyxmlparser.cpp" />
     <ClCompile Include="Main.cpp" />
     <ClCompile Include="StdInc.cpp">
       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">Create</PrecompiledHeader>
@@ -161,6 +171,10 @@
     </ClCompile>
   </ItemGroup>
   <ItemGroup>
+    <ClInclude Include="..\..\Shared\CLogFile.h" />
+    <ClInclude Include="..\..\Shared\CSettings.h" />
+    <ClInclude Include="..\..\Shared\Threading\CMutex.h" />
+    <ClInclude Include="..\..\Shared\Threading\CThread.h" />
     <ClInclude Include="Resource.h" />
     <ClInclude Include="StdInc.h" />
     <ClInclude Include="..\..\Shared\Common.h" />
Index: Client/Launcher/Client.Launcher.vcxproj.filters
===================================================================
--- Client/Launcher/Client.Launcher.vcxproj.filters	(revision 466)
+++ Client/Launcher/Client.Launcher.vcxproj.filters	(working copy)
@@ -19,6 +19,12 @@
       <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
       <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav</Extensions>
     </Filter>
+    <Filter Include="Source Files\Shared\XML">
+      <UniqueIdentifier>{ecddc2ba-4e2f-44f1-82b1-03a3f34cfd98}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Source Files\Shared\XML\TinyXML">
+      <UniqueIdentifier>{ba1db4ab-cbd9-485f-a21d-06ad49cb0e0e}</UniqueIdentifier>
+    </Filter>
   </ItemGroup>
   <ItemGroup>
     <ClCompile Include="Main.cpp">
@@ -33,6 +39,36 @@
     <ClCompile Include="..\..\Shared\SharedUtility.cpp">
       <Filter>Source Files\Shared</Filter>
     </ClCompile>
+    <ClCompile Include="..\..\Shared\CSettings.cpp">
+      <Filter>Source Files\Shared</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\Shared\CXML.cpp">
+      <Filter>Source Files\Shared\XML</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\Vendor\tinyxml\ticpp.cpp">
+      <Filter>Source Files\Shared\XML\TinyXML</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\Vendor\tinyxml\tinystr.cpp">
+      <Filter>Source Files\Shared\XML\TinyXML</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\Vendor\tinyxml\tinyxml.cpp">
+      <Filter>Source Files\Shared\XML\TinyXML</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\Vendor\tinyxml\tinyxmlerror.cpp">
+      <Filter>Source Files\Shared\XML\TinyXML</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\Vendor\tinyxml\tinyxmlparser.cpp">
+      <Filter>Source Files\Shared\XML\TinyXML</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\Shared\CLogFile.cpp">
+      <Filter>Source Files\Shared</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\Shared\Threading\CThread.cpp">
+      <Filter>Source Files\Shared</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\Shared\Threading\CMutex.cpp">
+      <Filter>Source Files\Shared</Filter>
+    </ClCompile>
   </ItemGroup>
   <ItemGroup>
     <ClInclude Include="Resource.h">
@@ -50,6 +86,18 @@
     <ClInclude Include="..\..\Shared\SharedUtility.h">
       <Filter>Header Files\Shared</Filter>
     </ClInclude>
+    <ClInclude Include="..\..\Shared\CSettings.h">
+      <Filter>Header Files\Shared</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Shared\CLogFile.h">
+      <Filter>Header Files\Shared</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Shared\Threading\CMutex.h">
+      <Filter>Header Files\Shared</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Shared\Threading\CThread.h">
+      <Filter>Header Files\Shared</Filter>
+    </ClInclude>
   </ItemGroup>
   <ItemGroup>
     <None Include="res\Launcher.ico">
Index: Client/Launcher/Main.cpp
===================================================================
--- Client/Launcher/Main.cpp	(revision 466)
+++ Client/Launcher/Main.cpp	(working copy)
@@ -20,6 +20,44 @@
 	char szInstallDirectory[MAX_PATH];
 	bool bFoundCustomDirectory = false;
 
+	// Check if protocol 'ivmp' and 'ivmultiplayer' is avaiable in registry
+	if(!SharedUtility::ReadRegistryString(HKEY_CLASSES_ROOT, "ivmultiplayer2", NULL, "", NULL, NULL)
+		|| !SharedUtility::ReadRegistryString(HKEY_CLASSES_ROOT, "ivmultiplayer2", NULL, "", NULL, NULL))
+	{
+		// Update
+		SharedUtility::WriteRegistryString(HKEY_CLASSES_ROOT,"ivmp","","IVMultiplayer",strlen("IVMultiplayer"));
+		SharedUtility::WriteRegistryString(HKEY_CLASSES_ROOT,"ivmultiplayer","","IVMultiplayer",strlen("IVMultiplayer"));
+		
+		String strcommand = String("\"%s\" \"%%1\"",SharedUtility::GetAbsolutePath("Client.Launcher.exe"));
+
+		SharedUtility::WriteRegistryString(HKEY_CLASSES_ROOT,"ivmp","Url Protocol","",0);
+		SharedUtility::WriteRegistryString(HKEY_CLASSES_ROOT,"ivmp\\shell\\open\\command\\","",strcommand.GetData(),strcommand.GetLength());
+		SharedUtility::WriteRegistryString(HKEY_CLASSES_ROOT,"ivmp\\DefaultIcon","",String("Client.Launcher.exe,1").GetData(),strlen("Client.Launcher.exe,1"));
+
+		SharedUtility::WriteRegistryString(HKEY_CLASSES_ROOT,"ivmultiplayer","Url Protocol","",0);
+		SharedUtility::WriteRegistryString(HKEY_CLASSES_ROOT,"ivmultiplayer\\shell\\open\\command\\","",strcommand.GetData(),strcommand.GetLength());
+		SharedUtility::WriteRegistryString(HKEY_CLASSES_ROOT,"ivmultiplayer\\DefaultIcon","",String("Client.Launcher.exe,1").GetData(),strlen("Client.Launcher.exe,1"));
+	}
+
+	// Check if protocol 'ivmp' and 'ivmultiplayer' is avaiable in registry
+	if(!SharedUtility::ReadRegistryString(HKEY_CLASSES_ROOT, "ivmp", NULL, "", NULL, NULL)
+		|| !SharedUtility::ReadRegistryString(HKEY_CLASSES_ROOT, "ivmultiplayer", NULL, "", NULL, NULL))
+	{
+		// Update
+		SharedUtility::WriteRegistryString(HKEY_CLASSES_ROOT,"ivmp","","IVMultiplayer",strlen("IVMultiplayer"));
+		SharedUtility::WriteRegistryString(HKEY_CLASSES_ROOT,"ivmultiplayer","","IVMultiplayer",strlen("IVMultiplayer"));
+		
+		String strcommand = String("\"%s\" \"%%1\"",SharedUtility::GetAbsolutePath("Client.Launcher.exe"));
+
+		SharedUtility::WriteRegistryString(HKEY_CLASSES_ROOT,"ivmp","Url Protocol","",0);
+		SharedUtility::WriteRegistryString(HKEY_CLASSES_ROOT,"ivmp\\shell\\open\\command\\","",strcommand.GetData(),strcommand.GetLength());
+		SharedUtility::WriteRegistryString(HKEY_CLASSES_ROOT,"ivmp\\DefaultIcon","",String("Client.Launcher.exe,1").GetData(),strlen("Client.Launcher.exe,1"));
+
+		SharedUtility::WriteRegistryString(HKEY_CLASSES_ROOT,"ivmultiplayer","Url Protocol","",0);
+		SharedUtility::WriteRegistryString(HKEY_CLASSES_ROOT,"ivmultiplayer\\shell\\open\\command\\","",strcommand.GetData(),strcommand.GetLength());
+		SharedUtility::WriteRegistryString(HKEY_CLASSES_ROOT,"ivmultiplayer\\DefaultIcon","",String("Client.Launcher.exe,1").GetData(),strlen("Client.Launcher.exe,1"));
+	}
+
 	// TODO: Steam registry entry support
 	if(!SharedUtility::ReadRegistryString(HKEY_LOCAL_MACHINE, "Software\\Rockstar Games\\Grand Theft Auto IV", 
 		"InstallFolder", NULL, szInstallDirectory, sizeof(szInstallDirectory)) || 
@@ -139,8 +177,74 @@
 		}
 	}
 
+	// Check if we have an server connect command
+	String strServer;
+	String strPort;
+	String strNewCommandLine = String(lpCmdLine);
+	std::string strServerCheck = String(lpCmdLine);
+
+	int iOffset = 0;
+	bool bFound = false;
+	std::size_t found = strServerCheck.find("-ivmp");// -[1]i[2]v[3]m[4]p[5]*space*[6]***.***.***.***
+	if(found != std::string::npos)
+	{
+		iOffset = 6;
+		bFound = true;
+	}
+
+	// check for ivmp commandline
+	if(!bFound)
+	{
+		 found = strServerCheck.find("ivmp://");
+		 iOffset = 7;
+		 bFound = true;
+	}
+
+	// check for ivmultiplayer commandline
+	if(!bFound)
+	{
+		 found = strServerCheck.find("ivmultiplayer://");
+		 iOffset = 16;
+		 bFound = true;
+	}
+
+	// Open default clientsettings
+	CSettings::Open(SharedUtility::GetAbsolutePath("clientsettings.xml"));
+
+	if(bFound)
+	{
+		std::string strServerInst = strServerCheck.substr(found+iOffset,strServerCheck.length());
+		std::size_t pos2 = strServerInst.find(":");
+
+		if(pos2 != std::string::npos) 
+		{
+			// Grab our connect data
+			strServer = String("%s",strServerInst.substr(0,pos2).c_str());
+			strPort = String("%s",strServerInst.substr(pos2+1,strServerInst.length()).c_str());
+
+			// Parse the command line
+			CSettings::ParseCommandLine(GetCommandLine());
+
+			// Write connect data to settings xml
+			CVAR_SET_STRING("currentconnect_server",strServer.Get());
+			CVAR_SET_INTEGER("currentconnect_port",strPort.ToInteger());
+			
+			// Generate new commandline
+			strNewCommandLine = String("%s -ivmp %s %s", lpCmdLine, strServer.Get(), strPort.Get());
+		}
+	}
+	else
+	{
+		//TODO: remove old entries if they were not removed by the client
+		CVAR_SET_STRING("currentconnect_server","0.0.0.0");
+		CVAR_SET_INTEGER("currentconnect_port",9999);
+	}
+	
+	// Close settings...
+	CSettings::Close();
+
 	// Generate the command line
-	String strCommandLine("%s %s", strApplicationPath.Get(), lpCmdLine);
+	String strCommandLine("%s %s", strApplicationPath.Get(), strNewCommandLine.Get());
 
 	// Start LaunchGTAIV.exe
 	STARTUPINFO siStartupInfo;
Index: Client/Launcher/StdInc.h
===================================================================
--- Client/Launcher/StdInc.h	(revision 466)
+++ Client/Launcher/StdInc.h	(working copy)
@@ -18,3 +18,4 @@
 #include <Common.h>
 #include <CString.h>
 #include <SharedUtility.h>
+#include <CSettings.h>
Index: Shared/CSettings.cpp
===================================================================
--- Shared/CSettings.cpp	(revision 466)
+++ Shared/CSettings.cpp	(working copy)
@@ -53,6 +53,8 @@
 #else
 	AddString("ip", "127.0.0.1");
 	AddInteger("port", 9999, 1024, 65535);
+	AddString("currentconnect_server", "0.0.0.0");
+	AddInteger("currentconnect_port", 9999, 1024, 65535);
 	AddString("nick", "player");
 	AddString("pass", "");
 	AddBool("windowed", false);
